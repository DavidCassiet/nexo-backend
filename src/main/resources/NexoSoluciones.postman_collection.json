{
	"info": {
		"_postman_id": "423f55ad-abd4-4661-86c4-0452ae548cd9",
		"name": "NexoSoluciones",
		"description": "# 🚀 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## 🔖 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## 💪 Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## 💡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28274042"
	},
	"item": [
		{
			"name": "Listar personas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"El código de estado es 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/personas",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personas"
					]
				},
				"description": "Recupera una lista de todas las personas."
			},
			"response": []
		},
		{
			"name": "Listado filtrado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"El código de estado es 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/personas/buscar?dni={{dni}}&nombre={{nombre}}&edad={{edad}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personas",
						"buscar"
					],
					"query": [
						{
							"key": "dni",
							"value": "{{dni}}"
						},
						{
							"key": "nombre",
							"value": "{{nombre}}"
						},
						{
							"key": "edad",
							"value": "{{edad}}"
						}
					]
				},
				"description": "Recupera una lista filtrada de personas basada en DNI, nombre y edad."
			},
			"response": []
		},
		{
			"name": "Crear persona",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Solicitud POST exitosa\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "dni",
							"value": "123456899",
							"type": "text"
						},
						{
							"key": "nombre",
							"value": "Maria",
							"type": "text"
						},
						{
							"key": "apellido",
							"value": "Benedetti",
							"type": "text"
						},
						{
							"key": "edad",
							"value": "49",
							"type": "text"
						},
						{
							"key": "foto",
							"type": "file"
						},
						{
							"key": "direccionSet",
							"value": "[{\"calle\": \"Calle Inventada\", \"numeroCalle\": \"456\",\"ciudad\": \"Resistencia\"}]",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/personas",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personas"
					]
				},
				"description": "Crea una nueva persona con los datos proporcionados."
			},
			"response": []
		},
		{
			"name": "Actualizar persona",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Solicitud PUT exitosa\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Felix\",\n    \"apellido\": \"Benedetti\",\n    \"edad\": 31,\n    \"direccionSet\": [\n        {\n            \"id\": 8,\n            \"calle\": \"Calle Inventada 2\",\n            \"numeroCalle\": \"999\",\n            \"ciudad\": \"Resistencia\"\n        },\n        {\n            \"calle\": \"Calle Inventada 3\",\n            \"numeroCalle\": \"945\",\n            \"ciudad\": \"Resistencia\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/personas/12345678",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personas",
						"12345678"
					]
				},
				"description": "Actualiza una persona existente con el ID especificado."
			},
			"response": []
		},
		{
			"name": "Eliminar persona",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Solicitud DELETE exitosa\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/personas/12345678",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personas",
						"12345678"
					]
				},
				"description": "Elimina una persona existente por ID."
			},
			"response": []
		},
		{
			"name": "Obtener persona por ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"El código de estado es 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"El cuerpo de la respuesta contiene el ID correcto\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.request.url.query.get('id'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/personas/12345678",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personas",
						"12345678"
					]
				},
				"description": "Recupera una persona por ID."
			},
			"response": []
		},
		{
			"name": "Exportar listado a CSV",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"El código de estado es 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"La respuesta está en formato CSV\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/csv');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/personas/exportar",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personas",
						"exportar"
					]
				},
				"description": "Exporta la lista de personas a un archivo CSV."
			},
			"response": []
		}
	]
}